{"meta":{"title":"Li'word","subtitle":"","description":"参见Hello Word","author":"Zhenhui Li","url":"https://kaki-jiu.github.io","root":"/"},"pages":[{"title":"","date":"2022-08-23T03:41:19.201Z","updated":"2022-08-23T03:41:19.201Z","comments":true,"path":"404/index.html","permalink":"https://kaki-jiu.github.io/404/index.html","excerpt":"","text":"title: ‘404 - 真巧，竟然在这里遇到你！’ date: 2020-09-12 23:01:35 comments: false permalink: /404.html 这是一个不存在的页面 很抱歉，你目前存取的页面并不存在。 预计将在约??秒后返回首页。 如果你很急着想看文章，你可以**点这里**返回首页。"},{"title":"书单","date":"2022-08-05T03:14:14.039Z","updated":"2022-08-05T03:14:14.039Z","comments":false,"path":"books/index.html","permalink":"https://kaki-jiu.github.io/books/index.html","excerpt":"","text":"hello"},{"title":"分类","date":"2022-08-03T17:12:06.141Z","updated":"2022-08-03T17:12:06.141Z","comments":false,"path":"categories/index.html","permalink":"https://kaki-jiu.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-08-05T11:33:23.771Z","updated":"2022-08-05T11:33:23.771Z","comments":false,"path":"about/index.html","permalink":"https://kaki-jiu.github.io/about/index.html","excerpt":"","text":"先留个位置,实在不想写了"},{"title":"友情链接","date":"2022-08-03T17:12:06.143Z","updated":"2022-08-03T17:12:06.143Z","comments":true,"path":"links/index.html","permalink":"https://kaki-jiu.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-08-05T03:18:20.807Z","updated":"2022-08-03T17:12:06.145Z","comments":false,"path":"repository/index.html","permalink":"https://kaki-jiu.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-08-03T17:12:06.148Z","updated":"2022-08-03T17:12:06.148Z","comments":false,"path":"tags/index.html","permalink":"https://kaki-jiu.github.io/tags/index.html","excerpt":"","text":""},{"title":"504","date":"2022-08-23T03:39:10.000Z","updated":"2022-08-23T03:39:10.341Z","comments":true,"path":"504/index.html","permalink":"https://kaki-jiu.github.io/504/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo 写博客流程及博客迁移","slug":"hexo-写博客流程及博客迁移","date":"2022-08-22T16:25:33.000Z","updated":"2022-08-22T17:48:51.473Z","comments":false,"path":"2022/08/23/hexo-写博客流程及博客迁移/","link":"","permalink":"https://kaki-jiu.github.io/2022/08/23/hexo-%E5%86%99%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/","excerpt":"","text":"0x00 写在前面的话 上次搞博客已经是半个月之前的事情了, 懒.jpg 由于众所周知的原因现在记忆力衰退的厉害, 很多事情不专门记一下就忘的差不多了, 所以为了本科毕业之后有个好工作, 搭建了这个博客来记录自己的学习历程迈出大学第一步 同时现在回头看自己写的第一篇博客简直一塌糊涂, 正好趁今天熬夜把它重构一下 0x01 新建一篇博文 在bolg根目录下运行hexo new post &quot;title&quot;, 此时发生了以下事件 hexo依据scaffolds/post.md为模板在source/_posts创建title.md, 具体路径依赖于使用的主题, 我的是pure 如果_config.yml中post_asset_folder: true的话会在一个同时生成名为title的文件夹用于存放图片 打开并编辑source/_posts/title.md 依照post.md最上方会有---夹起来的front-matter用于说明文件参数, 比较重要的有 title: 文章标题, 是博文预览时最大的那个字, 自动生成, 与new post一致, 当然瞎改也没有什么影响, 不会影响编译和对同名文件夹图片的调用, 甚至可以在_post下新建md文件直接xie, 只要符合文档里的格式需求即可 tags: 对应侧边栏标签, 初始有一个all, 文章有新标签时会自动创建, 区分大小写, 形式如下, 参考yml数组 123tags: - hexo - blog category: 侧边栏分类, 与tags同之 update/date: 更新时间/时间, 可以用来补作业, 目前我还用不到 comment: false 关闭评论系统, 目前还没有构建评论系统 根目录运行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s本地查看, 使用hexo d部署到github page上 hexo d部署需要配置_config.yml中的如下内容以及git和SSH key, 留个坑和迁移一起补 1234deploy:type: gitrepo: git@github.com:&lt;name&gt;/&lt;name&gt;.github.io.gitbranch: main 本地查看也可同时运行hexo clean &amp;&amp; hexo g -w和hexo s实时反映内容, 参见hexo 命令 删除博文:删除对应的title.md和title文件夹 0x02 博客本地存档转移 留坑后补 0x03 博客迁移 留坑后补","categories":[{"name":"blog","slug":"blog","permalink":"https://kaki-jiu.github.io/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kaki-jiu.github.io/tags/hexo/"}]},{"title":"hexo 下 markdown 图片本地索引","slug":"hexo-下-markdown-图片本地索引","date":"2022-08-05T13:02:14.000Z","updated":"2022-08-22T17:51:02.675Z","comments":false,"path":"2022/08/05/hexo-下-markdown-图片本地索引/","link":"","permalink":"https://kaki-jiu.github.io/2022/08/05/hexo-%E4%B8%8B-markdown-%E5%9B%BE%E7%89%87%E6%9C%AC%E5%9C%B0%E7%B4%A2%E5%BC%95/","excerpt":"","text":"插件地址:https://github.com/7ym0n/hexo-asset-image 关于插件下载, 正常只需要npm install hexo-asset-image --save, 但是由于不知名原因一直fail, 可以手动下载, 具体方法如下 在本地博客根目录下的./node_module/目录下删除hexo-asset-image文件夹, 运行git clone https://github.com/7ym0n/hexo-asset-image.git 在hexo-asset-image文件夹下运行npm install -g, 具体插件可以参考插件仓库给出说明, 可能还需要修改_config.yml文件(本插件不需要) 修改_config.yml的post_asset_folder: true, 会导致在hexo new post时自动创建同名文件夹用于保存图片 具体引用方式![image_introduction](./title_name/image_name.jpg), 注意 本地链接里的. 链接文件夹不可以跨文章, 可以参考github仓库里的编译结果 中文使用url编码, 在vscode下Markdown Preview Enhanced插件可以实现自动填充 运行hexo clean &amp;&amp; hexo g &amp;&amp; hexo s本地检查效果","categories":[{"name":"markdown","slug":"markdown","permalink":"https://kaki-jiu.github.io/categories/markdown/"},{"name":"blog","slug":"markdown/blog","permalink":"https://kaki-jiu.github.io/categories/markdown/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kaki-jiu.github.io/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://kaki-jiu.github.io/tags/markdown/"}]},{"title":"使用hexo创建自己的github page","slug":"使用hexo创建自己的github-page","date":"2022-08-05T10:13:40.000Z","updated":"2022-08-22T18:01:10.747Z","comments":true,"path":"2022/08/05/使用hexo创建自己的github-page/","link":"","permalink":"https://kaki-jiu.github.io/2022/08/05/%E4%BD%BF%E7%94%A8hexo%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github-page/","excerpt":"","text":"0x00 写在前面的碎碎念 出于一些原因想要创建自己的博客记录, 可以参见about 0x01 开始之前需要做的事 安装git, 使用git version查看是否成功 安装node.js, 使用node -v查看是否成功 安装hexo命令行支持$ npm install -g hexo-cli 文档里有关于将hexo添加到path里的说明, 但是我搞不清楚hexo的安装目录在哪里, 同时hexo-cli和hexo好像不太一样, 不懂 了解一些基本概念以帮助解决出现的问题 hexo的官方中文文档:https://hexo.io/zh-cn/docs/setup 一份很好的视频教程, , 时常大约25min:YouTube or bilibili, 本文的大部分内容都来自此处, 基本可以看作是复述, 自己实在是太菜了qaq 0x02 初始化工作文件夹 插件 查看我之前是否安装过插件(因为之前创建中间失败了一次) npm list hexo-deployer-git 看到什么都没有, 因为hexo管理脚本和插件时直接安装在当前工作目录下, 省去了remake的麻烦 init文件夹, 在D:\\的cmd下输入hexo init bolg, 创建一个名称为blog的工作目录, clone了https://github.com/hexojs/hexo-starter并添加了一些基础脚本和插件 cd blog, npm install作用:切换到工作目录, 把可能没装上的包再安装一次 文件夹结构 因为windows下tree命令参数太少, 所以文件结构是手敲的, 后面也是自己的理解 12345678910.github 可能是类似.git文件夹一样说明当前文件情况node-modules nodejs脚本和插件存放目录scaffolds 创建文章时的模板文件source `_post`文件夹存放自己写的文章, 还可以创建`_data`文件夹来存放公共数据(需要在`_config.yml`下开启), 比如友链之类theme 下载的主题, 需要在`_config.yml`启用_config.yml 站点配置文件, 说明网站模板, 具有第一优先级_config.landspace.yml 默认启用的一个主题配置, 可以看到`_config.yml`下theme默认值就是`landscape`.gitignore 说明git操作应当忽略的文件package.json 说明文件夹里使用的包(和npm有关系, 但是对nodejs和npm知之甚少, 只是自己的理解)package-lock.json 对`package.json`的详细说明 关于 scaffolds 文件的一点说明 在具体新建页面和创建文章是会用到 draft page post 本地上线 12hexo g #g就是generate生成`public`文件夹, 也就是我们在网页看到的东西hexo s -p 5000 #s就是sever, -p指定端口, 默认是4000端口 在浏览器访问http://localhost:5000/就可以看到样例 同时在周三 Tech的视频中提到可以使用两个shell中同时执行hexo clean &amp;&amp; hexo g -w 和 hexo s来在浏览器中实时反映调试结果, 这对一会修改模板相当有用, 改的时候没事切到shell里面看看有没有报错 0x03 导入模板 参考这个博客里的Fluid主题 我本来想要使用的purer主题, 它的文档在这里, 但是我无法按照他的文档顺利部署, 后来发现了一个类似样子的pure, 和一份前辈的笔记, 意外发现用起来还不错 开始之前可以阅读一遍hexo关于参数的说明, 按照需求设置_config.yml git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 这个命令是将模板下载到theme文件夹下, 在git bash下老是10054, 在cmd下好一点 在_config.yml中启用pure: 将theme设置为pure 安装相关依赖, 这里我只列出出我自己需要的, 可以参考pure的文档 1234567npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-deployer-git --save #部署 hexo dnpm install hexo-generator-feed --save #rss订阅 至此网站已经可以跑起来了, 但是还需要调整一些参数来达到实用 我使用了独立的 _config.[theme].yml 文件方法来修改配置, 参见此处, 按照需求修改/themes/pure/_config.yml.example后, 执行cp ./themes/pure/_config.yml.example _config.pure.yml复制到根目录, 口胡, hexo -v输出只有hexo-cli没有hexo, 那个是hexo 5以上支持的, 不懂.jpg 使用前记得将themes\\pure\\_source下的东西复制到source, 可以改一改相关的md文件 直接修改_config.yml和themes/pure/_config.yml 关于yml写法可以看一下阮一峰的博客 关于pure还找到了hwame的博客给大佬磕一个, 里面有关于左面标签的魔改成相册以及评论系统 一个tips:foo/bar是自二战时的俚语FUBAR(Fucked Up Beyond All Repair), 是坏到无法修缮的意思, 国外的程序员用这些词很大程度上是为了幽默, 当变量, 函数, 或命令本身不太重要的时候foobar, foo, bar, baz和qux就被用来充当这些实体的名字, 没有任何意义大雾 一个hexo客户端:https://github.com/gaoyoubo/hexo-client 0x04 评论系统","categories":[{"name":"blog","slug":"blog","permalink":"https://kaki-jiu.github.io/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kaki-jiu.github.io/tags/hexo/"},{"name":"pure","slug":"pure","permalink":"https://kaki-jiu.github.io/tags/pure/"}]}],"categories":[{"name":"博客","slug":"博客","permalink":"https://kaki-jiu.github.io/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"hexo","slug":"hexo","permalink":"https://kaki-jiu.github.io/categories/hexo/"},{"name":"test","slug":"test","permalink":"https://kaki-jiu.github.io/categories/test/"},{"name":"test","slug":"hexo/test","permalink":"https://kaki-jiu.github.io/categories/hexo/test/"},{"name":"Linux","slug":"Linux","permalink":"https://kaki-jiu.github.io/categories/Linux/"},{"name":"Hexo","slug":"Linux/Hexo","permalink":"https://kaki-jiu.github.io/categories/Linux/Hexo/"},{"name":"Tools","slug":"Tools","permalink":"https://kaki-jiu.github.io/categories/Tools/"},{"name":"PHP","slug":"Tools/PHP","permalink":"https://kaki-jiu.github.io/categories/Tools/PHP/"},{"name":"blog","slug":"blog","permalink":"https://kaki-jiu.github.io/categories/blog/"},{"name":"markdown","slug":"markdown","permalink":"https://kaki-jiu.github.io/categories/markdown/"},{"name":"blog","slug":"markdown/blog","permalink":"https://kaki-jiu.github.io/categories/markdown/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kaki-jiu.github.io/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://kaki-jiu.github.io/tags/markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"https://kaki-jiu.github.io/tags/Hexo/"},{"name":"pure","slug":"pure","permalink":"https://kaki-jiu.github.io/tags/pure/"},{"name":"test","slug":"test","permalink":"https://kaki-jiu.github.io/tags/test/"},{"name":"hexo,test","slug":"hexo-test","permalink":"https://kaki-jiu.github.io/tags/hexo-test/"}]}